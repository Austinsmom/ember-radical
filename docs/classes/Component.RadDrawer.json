{
  "name": "Component.RadDrawer",
  "shortname": "Component.RadDrawer",
  "classitems": [
    {
      "file": "addon/components/rad-drawer.js",
      "line": 228,
      "description": "<p>Actions Hash</p>\n",
      "itemtype": "property",
      "name": "actions",
      "type": "{Object}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 164,
      "description": "<p>Unique id for binding <code>aria-controls</code> in subcomponents</p>\n",
      "itemtype": "property",
      "name": "ariaId",
      "type": "{string}",
      "class": "Component.RadDrawer",
      "subprops": [
        {
          "name": "elementId",
          "description": ""
        }
      ],
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 217,
      "description": "<p>Auto-binds <code>data-test</code> attributes</p>\n",
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "{Array}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 101,
      "description": "<p>By default, the <code>target</code> subcomponent will display as a plain link. If you\nwould like it to display as a button, set this to <code>true</code>.</p>\n",
      "itemtype": "property",
      "name": "buttonStyle",
      "type": "{Boolean}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 171,
      "itemtype": "property",
      "name": "classNameBindings",
      "type": "{Array}",
      "default": "['hidden::active']",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 177,
      "description": "<p>Bind <code>rad-drawer</code> to component</p>\n",
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 144,
      "itemtype": "property",
      "name": "contentComponent",
      "type": "{string}",
      "passed": "",
      "optional": 1,
      "default": "'rad-drawer/content'",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 183,
      "description": "<p>The component's <code>didReceiveAttrs</code> hook. Allows udpates from external state\nto adjust the <code>hidden</code> state of a <code>rad-drawer</code> instance.</p>\n<p>This hook contains deprecated code and will be removed in Ember Radical 2.0</p>\n",
      "itemtype": "event",
      "name": "didReceiveAttrs",
      "return": {
        "description": "",
        "type": "Undefined"
      },
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 108,
      "description": "<p>Allow for external controls to update the open/closed state of a\n<code>rad-drawer</code>.</p>\n<p>This property is now deprecated as of Ember Radical 1.6 and will be\nremoved in Ember Radical 2.0. you should use {{c-l hidden}} instead.</p>\n",
      "itemtype": "property",
      "name": "externalToggle",
      "type": "{Boolean}",
      "default": "false",
      "deprecated": true,
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 120,
      "description": "<p>State boolean for display of the drawer content. Is toggled true/false to\nhandle show/hide. Updated in <code>toggleHidden</code>.</p>\n<p>You may optionally pass a boolean property into this component to control\nits state from the outside (one-way only).</p>\n",
      "itemtype": "property",
      "name": "hidden",
      "type": "{Boolean}",
      "default": "true",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 131,
      "description": "<p>If you want to use a different SVG icon from the default on your <code>target</code>,\nspecify it by name/id here. If you don't want to display an icon\nat all, pass <code>false</code> into this property</p>\n",
      "itemtype": "property",
      "name": "icon",
      "type": "{string|Boolean}",
      "default": "'arrow-down'",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 234,
      "description": "<p>Toggle internal {{c-l hidden}} property. Pass state boolean if specific state is needed.</p>\n",
      "itemtype": "method",
      "name": "toggleHidden",
      "params": [
        {
          "name": "evt",
          "description": "<p>Event object</p>\n",
          "type": "Object"
        },
        {
          "name": "state",
          "description": "<p>Specific state to set</p>\n",
          "type": "Boolean",
          "optional": true
        }
      ],
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    }
  ],
  "plugins": [],
  "extensions": [],
  "plugin_for": [],
  "extension_for": [],
  "file": "addon/components/rad-drawer.js",
  "line": 7,
  "description": "<p>Fully accessible expandable drawer/expandable content component.\nThe <code>rad-drawer</code> component is the parent container for a set of <code>target</code> and\n<code>content</code> subcomponents, which represent the title/trigger text to open the\ndrawer and the content to be revealed within the drawer, respectively.</p>\n<h2>Usage</h2>\n<p>There are two ways to use <code>rad-drawer</code>'s subcomponents:</p>\n<h3>1. Simple invocation via attrs</h3>\n<p>If you only have simple text (or pre-determined text/HTML within a variable)\nto yield, you can simply use the <code>Target</code> and <code>Content</code> attrs on <code>rad-drawer</code> to auto-invoke the subcomponents, like so:</p>\n<pre class=\"language-handlebars\"><code class=\"language-handlebars\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>rad<span class=\"token operator\">-</span>drawer\n  Target<span class=\"token operator\">=</span><span class=\"token string\">'Click to read more about puppies'</span>\n  Content<span class=\"token operator\">=</span><span class=\"token string\">'Imagine five paragraphs about puppies instead of this one sentence.'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>{{rad-drawer\nTarget='Click to read more about puppies'\nContent='Imagine five paragraphs about puppies instead of this one sentence.'}}</p>\n<p>This is the easiest and quickest way to create an instance of <code>rad-drawer</code>.</p>\n<h3>2. Full invocation via contextual components</h3>\n<p>If you have more complex needs in terms of the text/html/template code\nthat needs to exist in either the <code>target</code> or <code>content</code> subcomponents,\n<code>rad-drawer</code> yields contextual components for both which you can access\ndirectly within the block invocation of <code>rad-drawer</code>.</p>\n<pre class=\"language-handlebars\"><code class=\"language-handlebars\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>#rad<span class=\"token operator\">-</span>drawer <span class=\"token keyword\">as</span> <span class=\"token operator\">|</span>components<span class=\"token operator\">|</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>#components<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>This is a very large drawer that will be hard to not see<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>components<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>#components<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"https://media.giphy.com/media/6Bfnhb5jQqvny/giphy.gif\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>components<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>rad<span class=\"token operator\">-</span>drawer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>{{#rad-drawer as |components|}}\n{{#components.target}}\n<h2>This is a very large drawer that will be hard to not see</h2>\n{{/components.target}}\n{{#components.content}}\n<img src=\"https://media.giphy.com/media/6Bfnhb5jQqvny/giphy.gif\" alt=\"\" />\n{{/components.content}}\n{{/rad-drawer}}</p>\n<p>You can also combine the use of attrs and contextual components:</p>\n<pre class=\"language-handlebars\"><code class=\"language-handlebars\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>#rad<span class=\"token operator\">-</span>drawer Target<span class=\"token operator\">=</span><span class=\"token string\">'Click me! Come on, do it!'</span> <span class=\"token keyword\">as</span> <span class=\"token operator\">|</span>components<span class=\"token operator\">|</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>#components<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"https://media.giphy.com/media/RDG5Q86EJiNTG/giphy.gif\"</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>components<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>rad<span class=\"token operator\">-</span>drawer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>{{#rad-drawer Target='Click me! Come on, do it!' as |components|}}\n{{#components.content}}\n<img src=\"https://media.giphy.com/media/RDG5Q86EJiNTG/giphy.gif\" alt=\"\" />\n{{/components.content}}\n{{/rad-drawer}}</p>\n<p>Additionally, the open/closed state of a <code>rad-drawer</code> can be updated from\nan external state source. This can be very useful for situations where you\nwant another user interaction to trigger a drawer to open, or for setting\na drawer to be open by default. For example, you may wish to use a button to\nautomatically expand or collapse all core drawer instances at once.</p>\n<pre class=\"language-handlebars\"><code class=\"language-handlebars\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>#rad<span class=\"token operator\">-</span>button click<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>action <span class=\"token string\">'changeSomeProp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>Toggle Drawer<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>rad<span class=\"token operator\">-</span>button<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>rad<span class=\"token operator\">-</span>drawer Target<span class=\"token operator\">=</span><span class=\"token string\">'Hello'</span> Content<span class=\"token operator\">=</span><span class=\"token string\">'I am open now'</span> hidden<span class=\"token operator\">=</span>someProp<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<p>{{#rad-state as |state stateActions|}}\n{{#rad-button click=(action stateActions.toggleState)}}Toggle Drawer{{/rad-button}}\n{{rad-drawer Target='Hello' Content='I am open now' hidden=state}}\n{{/rad-state}}</p>\n<p><code>rad-drawer</code> will still continue to function normally with this property\npassed in, but it gives you the ability to control it externally.</p>\n<h2>Properties</h2>\n<table>\n<thead>\n<tr>\n<th>Configuration</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>buttonStyle</code></td>\n<td>boolean</td>\n<td>false</td>\n<td>Whether to style the <code>target</code> to look like a button</td>\n</tr>\n<tr>\n<td><code>hidden</code></td>\n<td>boolean</td>\n<td>false</td>\n<td>Pass in any other property to cause <code>rad-drawer</code> to update when that property updates</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string/boolean</td>\n<td>'arrow-down'</td>\n<td>Specifies which SVG icon to show in the <code>target</code>. Hides the icon if set to <code>false</code></td>\n</tr>\n</tbody>\n</table>\n<h2>A++ Accessibility Features</h2>\n<ul>\n<li>Drawer target auto-binds <code>aria-controls</code> to the value of the component ID</li>\n<li>Drawer target auto-binds <code>aria-expanded</code> to the expanded/collapsed state</li>\n<li>Show/hide of <code>content</code> is managed through <code>aria-hidden</code> attr</li>\n</ul>\n",
  "is_constructor": 1,
  "extends": "Ember.Component",
  "method": [
    {
      "file": "addon/components/rad-drawer.js",
      "line": 234,
      "description": "<p>Toggle internal {{c-l hidden}} property. Pass state boolean if specific state is needed.</p>\n",
      "itemtype": "method",
      "name": "toggleHidden",
      "params": [
        {
          "name": "evt",
          "description": "<p>Event object</p>\n",
          "type": "Object"
        },
        {
          "name": "state",
          "description": "<p>Specific state to set</p>\n",
          "type": "Boolean",
          "optional": true
        }
      ],
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    }
  ],
  "property": [
    {
      "file": "addon/components/rad-drawer.js",
      "line": 228,
      "description": "<p>Actions Hash</p>\n",
      "itemtype": "property",
      "name": "actions",
      "type": "{Object}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 164,
      "description": "<p>Unique id for binding <code>aria-controls</code> in subcomponents</p>\n",
      "itemtype": "property",
      "name": "ariaId",
      "type": "{string}",
      "class": "Component.RadDrawer",
      "subprops": [
        {
          "name": "elementId",
          "description": ""
        }
      ],
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 217,
      "description": "<p>Auto-binds <code>data-test</code> attributes</p>\n",
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "{Array}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 101,
      "description": "<p>By default, the <code>target</code> subcomponent will display as a plain link. If you\nwould like it to display as a button, set this to <code>true</code>.</p>\n",
      "itemtype": "property",
      "name": "buttonStyle",
      "type": "{Boolean}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 171,
      "itemtype": "property",
      "name": "classNameBindings",
      "type": "{Array}",
      "default": "['hidden::active']",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 177,
      "description": "<p>Bind <code>rad-drawer</code> to component</p>\n",
      "itemtype": "property",
      "name": "classNames",
      "type": "{Array}",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 144,
      "itemtype": "property",
      "name": "contentComponent",
      "type": "{string}",
      "passed": "",
      "optional": 1,
      "default": "'rad-drawer/content'",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 108,
      "description": "<p>Allow for external controls to update the open/closed state of a\n<code>rad-drawer</code>.</p>\n<p>This property is now deprecated as of Ember Radical 1.6 and will be\nremoved in Ember Radical 2.0. you should use {{c-l hidden}} instead.</p>\n",
      "itemtype": "property",
      "name": "externalToggle",
      "type": "{Boolean}",
      "default": "false",
      "deprecated": true,
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 120,
      "description": "<p>State boolean for display of the drawer content. Is toggled true/false to\nhandle show/hide. Updated in <code>toggleHidden</code>.</p>\n<p>You may optionally pass a boolean property into this component to control\nits state from the outside (one-way only).</p>\n",
      "itemtype": "property",
      "name": "hidden",
      "type": "{Boolean}",
      "default": "true",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    },
    {
      "file": "addon/components/rad-drawer.js",
      "line": 131,
      "description": "<p>If you want to use a different SVG icon from the default on your <code>target</code>,\nspecify it by name/id here. If you don't want to display an icon\nat all, pass <code>false</code> into this property</p>\n",
      "itemtype": "property",
      "name": "icon",
      "type": "{string|Boolean}",
      "default": "'arrow-down'",
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    }
  ],
  "event": [
    {
      "file": "addon/components/rad-drawer.js",
      "line": 183,
      "description": "<p>The component's <code>didReceiveAttrs</code> hook. Allows udpates from external state\nto adjust the <code>hidden</code> state of a <code>rad-drawer</code> instance.</p>\n<p>This hook contains deprecated code and will be removed in Ember Radical 2.0</p>\n",
      "itemtype": "event",
      "name": "didReceiveAttrs",
      "return": {
        "description": "",
        "type": "Undefined"
      },
      "class": "Component.RadDrawer",
      "srcFileId": "addon_components_rad-drawer.js"
    }
  ],
  "srcFileId": "addon_components_rad-drawer.js"
}