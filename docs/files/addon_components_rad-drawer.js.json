{
  "file": "addon/components/rad-drawer.js",
  "content": "<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript}\"><span aria-hidden=\"true\" role=\"presentation\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">'ember-component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> computed <span class=\"token keyword\">from</span> <span class=\"token string\">'ember-computed'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> hbs <span class=\"token keyword\">from</span> <span class=\"token string\">'htmlbars-inline-precompile'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>controls<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/arias'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Fully accessible expandable drawer/expandable content component.\n * The `rad-drawer` component is the parent container for a set of `target` and\n * `content` subcomponents, which represent the title/trigger text to open the\n * drawer and the content to be revealed within the drawer, respectively.\n *\n * ## Usage\n *\n * There are two ways to use `rad-drawer`'s subcomponents:\n *\n * ### 1. Simple invocation via attrs\n *\n * If you only have simple text (or pre-determined text/HTML within a variable)\n * to yield, you can simply use the `Target` and `Content` attrs on `rad-drawer` to auto-invoke the subcomponents, like so:\n *\n * ```glimmer\n * {{rad-drawer\n *   Target='Click to read more about puppies'\n *   Content='Imagine five paragraphs about puppies instead of this one sentence.'}}\n * ```\n *\n * This is the easiest and quickest way to create an instance of `rad-drawer`.\n *\n * ### 2. Full invocation via contextual components\n *\n * If you have more complex needs in terms of the text/html/template code\n * that needs to exist in either the `target` or `content` subcomponents,\n * `rad-drawer` yields contextual components for both which you can access\n * directly within the block invocation of `rad-drawer`.\n *\n * ```glimmer\n * {{#rad-drawer as |components|}}\n *   {{#components.target}}\n *     &lt;h2>This is a very large drawer that will be hard to not see&lt;/h2>\n *   {{/components.target}}\n *   {{#components.content}}\n *     &lt;img src=\"https://media.giphy.com/media/6Bfnhb5jQqvny/giphy.gif\" alt=\"\" />\n *   {{/components.content}}\n * {{/rad-drawer}}\n * ```\n *\n * You can also combine the use of attrs and contextual components:\n *\n * ```glimmer\n * {{#rad-drawer Target='Click me! Come on, do it!' as |components|}}\n *   {{#components.content}}\n *     &lt;img src=\"https://media.giphy.com/media/RDG5Q86EJiNTG/giphy.gif\" alt=\"\" />\n *   {{/components.content}}\n * {{/rad-drawer}}\n * ```\n *\n * Additionally, the open/closed state of a `rad-drawer` can be updated from\n * an external state source. This can be very useful for situations where you\n * want another user interaction to trigger a drawer to open, or for setting\n * a drawer to be open by default. For example, you may wish to use a button to\n * automatically expand or collapse all core drawer instances at once.\n *\n * ```handlebars\n * {{#rad-button click=(action 'changeSomeProp')}}Toggle Drawer{{/rad-button}}\n *\n * {{rad-drawer Target='Hello' Content='I am open now' externalToggle=someProp}}\n * ```\n *\n * {{#rad-state as |state stateActions|}}\n *   {{#rad-button click=(action stateActions.toggleState)}}Toggle Drawer{{/rad-button}}\n *   {{rad-drawer Target='Hello' Content='I am open now' externalToggle=state}}\n * {{/rad-state}}\n *\n * `rad-drawer` will still continue to function normally with this property\n * passed in, but it gives you the ability to control it externally.\n *\n * ## Properties\n *\n * Configuration | Type | Default | Description\n * --- | --- | --- | ---\n * `externalToggle` | boolean | false | Pass in any other property to cause `rad-drawer` to update when that property updates\n * `icon` | string/boolean | 'arrow-down' | Specifies which SVG icon to show in the `target`. Hides the icon if set to `false`\n * `buttonStyle` | boolean | false | Whether to style the `target` to look like a button\n *\n * ## A++ Accessibility Features\n *\n * - Drawer target auto-binds `aria-controls` to the value of the component ID\n * - Drawer target auto-binds `aria-expanded` to the expanded/collapsed state\n * - Show/hide of `content` is managed through `aria-hidden` attr\n *\n * @class Component.RadDrawer\n * @constructor\n * @extends Ember.Component\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Component<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Passed Properties</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * By default, the `target` subcomponent will display as a plain link. If you\n   * would like it to display as a button, set this to `true`.\n   * @property buttonStyle\n   * @type {Boolean}\n   */</span>\n  buttonStyle<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Allow for external controls to update the open/closed state of a `rad-drawer`\n   * @property externalToggle\n   * @type {Boolean}\n   */</span>\n  externalToggle<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * If you want to use a different SVG icon from the default on your `target`,\n   * specify it by name/id here. If you don't want to display an icon\n   * at all, pass `false` into this property\n   * @property icon\n   * @type {string|Boolean}\n   * @default 'arrow-down'\n   */</span>\n  icon<span class=\"token punctuation\">:</span> <span class=\"token string\">'arrow-down'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Contextual Component Specifications</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * @property contentComponent\n   * @type {string}\n   * @passed\n   * @optional\n   * @default 'rad-drawer/content'\n   */</span>\n  contentComponent<span class=\"token punctuation\">:</span> <span class=\"token string\">'rad-drawer/content'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * @property contentComponent\n   * @type {string}\n   * @passed\n   * @optional\n   * @default 'rad-drawer/content'\n   */</span>\n  targetComponent<span class=\"token punctuation\">:</span> <span class=\"token string\">'rad-drawer/target'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Properties</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Unique id for binding `aria-controls` in subcomponents\n   * @property ariaId\n   * @type {string}\n   * @param elementId\n   */</span>\n  ariaId<span class=\"token punctuation\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elementId'</span><span class=\"token punctuation\">,</span> controls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * @property classNameBindings\n   * @type {Array}\n   * @default ['hidden::active']\n   */</span>\n  classNameBindings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hidden::active'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Bind `rad-drawer` to component\n   * @property classNames\n   * @type {Array}\n   */</span>\n  classNames<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'rad-drawer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * State boolean for display of the drawer content. Is toggled true/false to\n   * handle show/hide. Updated in `toggleHidden`\n   * @property hidden\n   * @type {Boolean}\n   * @default true\n   */</span>\n  hidden<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Ember Properties</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Auto-binds `data-test` attributes\n   *\n   * @property attributeBindings\n   * @type {Array}\n   */</span>\n  attributeBindings<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'data-test'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Hooks</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * The component's `didReceiveAttrs` hook. Allows udpates from external state\n   * to adjust the `hidden` state of a `rad-drawer` instance.\n   *\n   * @event didReceiveAttrs\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">didReceiveAttrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> externalToggle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'externalToggle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> oldExternalToggle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_oldExternalToggle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldExternalToggle <span class=\"token operator\">!==</span> externalToggle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>externalToggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Update the private hidden state so it can be used for comparison</span>\n    <span class=\"token comment\" spellcheck=\"true\">// on the next attrs update</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_oldExternalToggle'</span><span class=\"token punctuation\">,</span> externalToggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Actions</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Actions Hash\n   * @property actions\n   * @type {Object}\n   */</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Toggle internal hidden property. Pass state boolean if specific state is needed.\n     * @method toggleHidden\n     * @param {Object}  evt     Event object\n     * @param {boolean} [state] Specific state to set\n     */</span>\n    <span class=\"token function\">toggleHidden</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">!==</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Layout</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n  layout<span class=\"token punctuation\">:</span> hbs<span class=\"token template-string\"><span class=\"token string\">`\n    {{#if Target}}\n      {{#rad-drawer/target\n        ariaId=ariaId\n        click=(action 'toggleHidden')\n        hidden=hidden\n        icon=icon\n        link=(not buttonStyle)\n        tagcategory=tagcategory tagaction=tagaction taglabel=taglabel tagvalue=tagvalue tagcd=tagcd\n        data-test=(if data-test (concat data-test '-target'))}}\n        {{{Target}}}\n      {{/rad-drawer/target}}\n    {{/if}}\n\n    {{yield (hash\n      content=(component contentComponent\n        ariaId=ariaId\n        hidden=hidden\n        data-test=(if data-test data-test))\n      target=(component targetComponent\n        ariaId=ariaId\n        click=(action 'toggleHidden')\n        hidden=hidden\n        icon=icon\n        link=(not buttonStyle)\n        tagcategory=tagcategory tagaction=tagaction taglabel=taglabel tagvalue=tagvalue tagcd=tagcd\n        data-test=(if data-test (concat data-test '-target')))\n    ) hidden}}\n\n    {{#if Content}}\n      {{#rad-drawer/content hidden=hidden ariaId=ariaId data-test=(if data-test (concat data-test '-content'))}}\n        {{{Content}}}\n      {{/rad-drawer/content}}\n    {{/if}}\n  `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>"
}