{
  "file": "addon/services/tagging.js",
  "content": "<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript}\"><span aria-hidden=\"true\" role=\"presentation\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword\">import</span> Service <span class=\"token keyword\">from</span> <span class=\"token string\">'ember-service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Base tagging class. Provides methods for pushing data into the data layer.\n * @class Tagging\n * @constructor\n * @extends Ember.Service\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Service<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Methods</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Method for pushing an object into the data layer. Used to set the custom\n   * dimensions included with tags.\n   * @method pushData\n   * @param {Object} data Object of key/value pairs mapping to custom dimensions\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">pushData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Don't push the data if it's not an object</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> data <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Ember hash helper creates a fake Object which lacks the Object prototype. fix that.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>data <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> data <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    window<span class=\"token punctuation\">.</span>dataLayer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Fire tag by pushing analytics event into dataLayer\n   *\n   * Passing in an object representing tagging information is now supported and\n   * is the preferred method for invoking `fireTag`. Additionally, custom dimensions\n   * may now also be passed in as part of this object.\n   *\n   * Example:\n   * ```javascript\n   * tagging.fireTag({\n   *   category: 'Big Hunks',\n   *   action: 'A hunk didnt listen',\n   *   label: 'Hunks are bad listeners',\n   *   cd: {\n   *     someCD: 'somevalue'\n   *   }\n   * });\n   * ```\n   * @method fireTag\n   * @param {Object} tag Tag object containing all of the tag data\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">fireTag</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Tags require a category and action, don't even think about sending without 'em</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tag<span class=\"token punctuation\">.</span>tagcategory <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>tag<span class=\"token punctuation\">.</span>tagaction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> tagcd <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span>tagcd <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> taglabel <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">.</span>taglabel<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Ember hash helper creates a fake Object which lacks the Object prototype. fix that.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>tagcd <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> tagcd <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> tagcd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Send N/A instead of an empty label b/c analytics</span>\n    taglabel <span class=\"token operator\">=</span> taglabel <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> taglabel <span class=\"token operator\">===</span> undefined <span class=\"token operator\">?</span> <span class=\"token string\">'N/A'</span> <span class=\"token punctuation\">:</span> taglabel<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Push this tagging event's custom dimensions into the data layer</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagcd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pushData</span><span class=\"token punctuation\">(</span>tagcd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    window<span class=\"token punctuation\">.</span>dataLayer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      event<span class=\"token punctuation\">:</span> <span class=\"token string\">'analyticsEvent'</span><span class=\"token punctuation\">,</span>\n      eventCategory<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">.</span>tagcategory<span class=\"token punctuation\">,</span>\n      eventAction<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">.</span>tagaction<span class=\"token punctuation\">,</span>\n      eventLabel<span class=\"token punctuation\">:</span> taglabel<span class=\"token punctuation\">,</span>\n      eventValue<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">.</span>tagvalue<span class=\"token punctuation\">,</span>\n      eventNonInt<span class=\"token punctuation\">:</span> tag<span class=\"token punctuation\">.</span>tagnonInteractive\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Reset custom dimensions that were specific to this tagging event</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tagcd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Replace all values in custom dimensions with undefined</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> dim <span class=\"token keyword\">in</span> tagcd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> tagcd<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>dim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          tagcd<span class=\"token punctuation\">[</span>dim<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> undefined<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pushData</span><span class=\"token punctuation\">(</span>tagcd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Send a page view by pushing virtual pageview event into data layer\n   * @method firePageView\n   * @param {string} page url of the page to send\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">firePageView</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>page<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    window<span class=\"token punctuation\">.</span>dataLayer<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      event<span class=\"token punctuation\">:</span> <span class=\"token string\">'virtual-pageview'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'virtual page'</span><span class=\"token punctuation\">:</span> page\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>"
}