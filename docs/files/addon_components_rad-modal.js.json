{
  "file": "addon/components/rad-modal.js",
  "content": "<pre class=\"language-javascript line-numbers\"><code class=\"language-javascript}\"><span aria-hidden=\"true\" role=\"presentation\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span><span class=\"token keyword\">import</span> Component <span class=\"token keyword\">from</span> <span class=\"token string\">'ember-component'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> hbs <span class=\"token keyword\">from</span> <span class=\"token string\">'htmlbars-inline-precompile'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>later<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'ember-runloop'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> $ <span class=\"token keyword\">from</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Utils</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bindOnEscape<span class=\"token punctuation\">,</span> unbindOnEscape <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/listeners'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * ### Ember Radical DDAU Modal\n * Triggering modal open and close is handled using a data point to represent\n * the open state instead of an event listener on body filtering for some\n * identifier. This state should be handled by a data level service (could\n * also be a route or component).\n *\n * #### Usage:\n *\n * **With Basic Header:**\n * ```handlebars\n * {{#rad-modal\n *   open=someService.modalActive\n *   Header='This is the modal title'\n *   closeModal=(action 'closeModal' target=someService)}}\n *   &lt;p>This is a totally rad modal!&lt;/p>\n * {{/rad-modal}}\n * ```\n *\n * **With Full/Custom Header:**\n * ```handlebars\n * {{#rad-modal\n *   open=someService.modalActive\n *   closeModal=(action \"closeModal\" target=someService)\n *   as |components|}}\n *   {{! Modal Header Subcomponent}}\n *   {{#components.header}}\n *     &lt;h3>{{rad-svg svgId=\"sparkles\"}} It Just Worksâ„¢&lt;/h3>\n *   {{/components.header}}\n *   &lt;p>I will be yielded inside of the modal body! Don't worry about adding\n *   padding to me, the modal has 30px padding all around.&lt;/p>\n * {{/rad-modal}}\n * ```\n *\n * **With No Header:**\n * Even if you don't want or need a header for your modal, _some form of header\n * text is required for 508 compliance_.\n *\n * ```handlebars\n * {{#rad-modal\n *   open=someService.modalActive\n *   ariaHeader='This is the puppy modal'\n *   closeModal=(action \"closeModal\" target=someService)}}\n *   &lt;p>Imagine several cute puppy images and/or gifs here.&lt;/p>\n * {{/components.header}}\n * ```\n *\n * Note that `open`, `closeAction` and some form of a header are all required.\n *\n * #### Data Down\n * A boolean data point `open` must be passed into this component. This\n * data point represents the state of the modal and must be controlled by some\n * parent context (a Service, Controller or some parent component). DO NOT\n * MUTATE THIS DATA POINT IN THIS COMPONENT!\n *\n * When following DDAU this component will automagically rerender whenever the\n * `open` state of your component changes because it is **passed down** as\n * data. This removes the need for observers and event listeners (ðŸ™Œ ðŸ™Œ ðŸ™Œ) and\n * allows us to programmatically open and close the modal based purely on user\n * actions &amp;&amp; application data/state.\n *\n * When `open` is truthy, the template will add a class `active` to the modal's\n * `&lt;div>`s. This class toggles visibility and fades in the modal using a CSS\n * transition. (The `aria-hidden` attribute is used to control actual visbility\n * for all users/browsers and screen readers; `active` is purely presentational)\n *\n * #### Actions Up\n * Provide a closure action to the component as `closeModal`. This action will\n * be automagically attached to the gray modal background. Whenever a user\n * clicks the background, that action will relay the event to your parent\n * context. You can then reliably handle whatever closing logic needs to happen\n * and mutate your modal's `open` state on the parent context. This update will\n * flow back down into the component and make the necessary changes to \"close\"\n * the modal.\n *\n * #### Yielded Data\n * This component will yield:\n *\n * - A `components` hash which you can use to directly invoke the `header`\n *   subcomponent for situations where you need more than just text in your\n *   modal header. You can reference in your template as:\n *   `{{#components.header}}Some text and elements here{{/components.header}}`\n * - The `open` state of the modal, in case something in your header or modal\n *   body needs access to this state.\n *\n * #### Configurations\n * The component can be configured with the following flags:\n *\n * - `animateFrom`: If you would like the modal to animate in, use this property\n *   to set up an animation direction; \"left\", \"right\", \"top\", or \"bottom\".\n * - `autoFocus`: set to false to prevent the modal from refocusing\n *   the last element that was active in the DOM before the modal as opened.\n * - `closeButton`: Controls display of the header close button. Set to false to\n *   hide close button.\n * - `removeFromDomOnClose`: While you normally may wish to control whether\n *   your modal is being rendered at all via external logic, there are cases\n *   where you may be using the modal (e.g. in a wizard-like user flow) where\n *   you may want to have the modal destroy itself when it closes. Use this\n *   property if you want this kind of behavior.\n * - `size`: Default size of the modal is 60% of browser width on desktop. You\n *   may optionally choose `small` (30%), `medium` (45%), or `full` (100%).\n *   Modals are always full-width on small screen sizes.\n *\n * #### Non-Dismissable Modal\n * Create a modal that cannot be dismissed on click of the modal background by\n * not passing a `closeModal` closure _(Modal components are set up with a no op\n * `closeModal` action by default)_. Note that although not required, it's\n * suggested to pass `closeButton=false` to suppress display of the close button\n * because it won't do anything.\n *\n * ##### TODO:\n * - Explore/Document how to handle having multiple modals of the same type? One\n *   modal with dynamic content? or multiple modals with modal ids?\n * - Handle returning focus to the modal when a user tabs focus outside of the\n *   modal. Start with Bootstrap modals (which accomplish this). Can it be done\n *   without event listeners?\n *\n * @class Component.RadModal\n * @constructor\n * @extends Ember.Component\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Component<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Passed Properties</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * If a modal should not have a visible header, pass a label for the modal\n   * using this property. It will be bound to a hidden div with the correct\n   * aria attrs so that we're rocking A+ accessibility all day every day.\n   * @property ariaHeader\n   * @type {string}\n   * @default ''\n   */</span>\n  ariaHeader<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Unless autoFocus is toggled to false, the modal will store a\n   * reference to whatever element is currently active in the dom and return\n   * focus to that element when the modal closes.\n   * @property autoFocus\n   * @type {Boolean}\n   * @default false\n   */</span>\n  autoFocus<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * CSS transitions the modal on open. Accepts 'left', 'right', 'bottom', 'top'.\n   * @property animateFrom\n   * @type {String}\n   */</span>\n  animateFrom<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Controls display of the modal header close button. Is defaulted to true and\n   * can be set to false in order to suppress the header close button.\n   * @property closeButton\n   * @type {!Boolean}\n   * @passed\n   * @optional\n   * @default true\n   */</span>\n  closeButton<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Controls the SVG Id of the close button.\n   * @property closeIcon\n   * @type {string}\n   * @passed\n   * @optional\n   * @default 'close'\n   */</span>\n  closeIcon<span class=\"token punctuation\">:</span> <span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Flag used to handle showing and hiding the modal. This property\n   * should be passed in by a component/service+controller that controls the\n   * state of the modal.\n   * @property open\n   * @type {Boolean}\n   * @default false\n   */</span>\n  open<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Determines if the modal should be removed from the DOM when it is closed.\n   * This is to help performance on the beefier modals.\n   * @property removeFromDomOnClose\n   * @default false\n   * @type {Boolean}\n   */</span>\n  removeFromDomOnClose<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * The size of the modal to display. The default size caps the width of the\n   * modal at 60% of the browser's viewport. Additional sizes available are:\n   *\n   * - `\"small\"` (30% on large, 45% on medium)\n   * - `\"medium\"` (45% on large, 60% on medium)\n   * - `\"full\"` (100% on large and medium)\n   *\n   * Modals will always render at 100% on mobile/small screen view.\n   * @property size\n   * @type {string}\n   * @default ''\n   */</span>\n  size<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Pass a string for simple text modal header. If the modal should have no\n   * header, pass null to this property. This will ensure that `aria-labelledby`\n   * is _not_ bound to the modal instance (because there is no header to label\n   * the modal).\n   * @property Header\n   * @type {string}\n   * @default ''\n   */</span>\n  Header<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Pass a `(hash)` of tagging properties when you need to bind a tag fire to\n   * close of the modal. Expects syntax:\n   * `(hash category=\"Tag Category\" action=\"Tag Action\" label=\"Tag Label\")`\n   * @property tagclose\n   * @type {Object}\n   */</span>\n  tagClose<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    category<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    action<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Closure Actions</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Closure action passed into the modal. Is event delegated to the modal\n   * background for close on click (unless 'hideBackground' is true)\n   * @property closeModal\n   * @type {function}\n   * @passed\n   * @optional\n   * @closure\n   */</span>\n  closeModal<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Properties</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Determines if the modal is currently _active_, which means that the modal\n   * has been opened/closed. Note that this is different from _visible_. Due to\n   * transition time, a modal can be _active_ but not yet _visible_ to the user.\n   * Seperate props are required for tracking active vs visible to allow the\n   * css animations to trigger.\n   * @property _active\n   * @type {Boolean}\n   * @default false\n   */</span>\n  _active<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Private reference to the last focused element in the DOM before the modal\n   * was opened. This is used to make the experience for keyboard users not\n   * terrible.\n   *\n   * @property _lastFocusedElement\n   * @type {Object}\n   * @default undefined\n   */</span>\n  _lastFocusedElement<span class=\"token punctuation\">:</span> undefined<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Determines if the modal should be rendered in the template. This is not\n   * equivalent to `open`. In order for CSS transitions to work properly, the\n   * modal must be rendered in the DOM when the class that applies the\n   * transition is added to/removed from the modal.\n   * @property _visible\n   * @type {Boolean}\n   * @default false\n   */</span>\n  _visible<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Methods</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Handle modal cleanup here:\n   *\n   * - Unfreeze body\n   * - Remove 'active' class from modal elements to hide them if still in DOM\n   * - Return focus to last active element unless disabled (for better\n   *   usability)\n   *\n   * @method _handleClose\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">_handleClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Fire user hooks</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onHide'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onHide'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Remove body scroll freeze</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fixed-body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Remove active classes in case modal stays in DOM while it is closed</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Move focus back to last element (usually the button that opened the</span>\n    <span class=\"token comment\" spellcheck=\"true\">// modal) and clear out _lastFocusedElement to boy scout against any weird</span>\n    <span class=\"token comment\" spellcheck=\"true\">// bugs involving opening and closing modals multiple times</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'autoFocus'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_lastFocusedElement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_lastFocusedElement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_lastFocusedElement'</span><span class=\"token punctuation\">,</span> undefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Unbind escape listener</span>\n    <span class=\"token function\">unbindOnEscape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elementId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// The modal isn't the quickest of components, and needs some more time</span>\n    <span class=\"token comment\" spellcheck=\"true\">// finish it's transition/animation.</span>\n    <span class=\"token function\">later</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Don't run this on a dealy if the object is destoryed. This can</span>\n      <span class=\"token comment\" spellcheck=\"true\">// happen when the user transitions to another route or during tests</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isDestroyed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_visible'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// Fire user hooks</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onHidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onHidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Handle modal open work here:\n   *\n   * * Freeze the body so that scrolling inside the modal doesn't jank up the\n   *   screen\n   * * Add 'active' class to modal elements, if the modal is already in DOM this\n   *   will make it visible\n   * * Set private reference to currently active DOM element so we can return\n   *   focus to it when the modal closes (for usability)\n   *\n   * @method _handleOpen\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">_handleOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Fire user hooks</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onShow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onShow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Prevent body scroll while modal is open</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fixed-body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Set the modal to be shown in the DOM first to allow for transitions</span>\n    <span class=\"token comment\" spellcheck=\"true\">// to work properly.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_visible'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Set the current `activeElement` from the document to focus on close</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'autoFocus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_lastFocusedElement'</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>activeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Bind the keycommand `esc` to close modal</span>\n    <span class=\"token function\">bindOnEscape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elementId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'closeModal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Wait to add active to modal elements until next run loop. This is</span>\n    <span class=\"token comment\" spellcheck=\"true\">// required for when we wait to render the modal until it should be active</span>\n    <span class=\"token comment\" spellcheck=\"true\">// if we add the active class at this point, then the modal renders with</span>\n    <span class=\"token comment\" spellcheck=\"true\">// active class and so there is no *transition*</span>\n    <span class=\"token function\">later</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// Focus the modal wrapper for usability</span>\n      <span class=\"token comment\" spellcheck=\"true\">// @TODO: A method to handle checking for an autoFocus element would be A++</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.rad-modal-wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// Fire user hooks</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onShown'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'onShown'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Hooks</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * Whenever this component receives attrs check if the `open` prop matches the\n   * template status. If not, call the handlers for open/close\n   *\n   * @event didReceiveAttrs\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">didReceiveAttrs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> background <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.rad-modal-background'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> hidden <span class=\"token operator\">=</span> background <span class=\"token operator\">?</span> background<span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aria-hidden'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> hidden <span class=\"token operator\">===</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> hidden <span class=\"token operator\">===</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * When modal is inserted into DOM, check if it should be open by default, if\n   * so we need to call `_handleOpen` manually to open it.\n   * @method didInsertElement\n   */</span>\n  <span class=\"token function\">didInsertElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>DEVELOPMENT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// In dev builds, check for a header element with the correct aria bindings</span>\n      <span class=\"token comment\" spellcheck=\"true\">// aria-labelledby is required for A++ Accessibility</span>\n      <span class=\"token keyword\">const</span> elementId <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elementId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> headerId <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`#aria-labelledby-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>elementId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>headerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">'header'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://media.giphy.com/media/6Bfnhb5jQqvny/giphy.gif'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{{rad-modal}}: You must specify a modal header or supply an `ariaHeader` string, ya dongus'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">/**\n   * willDestroyElement hook used to ensure that all of the closing logic that\n   * needs to happen fires off.\n   *\n   * **NOTE:** This will make sure that the body doesn't get frozen in place if\n   * your modal isn't cleaned up, but when you navigate back to whatever created\n   * this modal it may still be open. If this is the case remember that the\n   * open state of your modal is a data down property which needs to be cleaned\n   * up on whatever parent context controls it.\n   *\n   * @event willDestroyElement\n   * @return {undefined}\n   */</span>\n  <span class=\"token function\">willDestroyElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// Layout</span>\n  <span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------------------------------</span>\n  layout<span class=\"token punctuation\">:</span> hbs<span class=\"token template-string\"><span class=\"token string\">`\n    {{! Modal background is passed closeModal closure action for closing on click}}\n    &lt;div class='rad-modal-background{{if animateFrom ' animate-from'}}{{if _active ' active'}}'\n      aria-hidden='{{not _visible}}'\n      {{action closeModal}}\n      data-firetag\n      data-tagcategory={{tagClose.category}}\n      data-tagaction={{tagClose.action}}\n      data-taglabel={{tagClose.label}}\n      data-test='rad-modal-background'>\n    &lt;/div>\n\n    {{#if (or _visible (not removeFromDomOnClose))}}\n      {{! The actual modal div. { role, labelledby, hidden } => 508 compliance attrs  }}\n      {{! Note that if passed Header is null, we do not bind aria-labelledby }}\n      &lt;div\n        class='rad-modal-wrapper {{size}}{{if animateFrom (concat ' animate-' animateFrom)}}{{if _active ' active'}}'\n        role='dialog'\n        tabindex='-1'\n        aria-labelledby='aria-labelledby-{{elementId}}'\n        aria-hidden='{{not _visible}}'\n        data-test='rad-modal-wrapper'>\n\n        {{! If a Header is passed, handle setting one up }}\n        {{#if Header}}\n          {{#rad-modal/header\n            closeButton=closeButton\n            closeIcon=closeIcon\n            closeModal=closeModal\n            elementId=(concat 'aria-labelledby-' elementId)\n            tagClose=tagClose}}\n            &lt;h2>{{{Header}}}&lt;/h2>\n          {{/rad-modal/header}}\n        {{/if}}\n\n        {{#if ariaHeader}}\n          {{!-- Render aria label for screen readers --}}\n          &lt;header id='aria-labelledby-{{elementId}}' class='aria-header'>{{ariaHeader}}&lt;/header>\n          {{#if closeButton}}\n            &lt;div class='clearfix'>\n              {{#rad-button\n                link=true\n                aria-label='close'\n                classNames='close pull-right'\n                click=closeModal\n                tagcategory=tagClose.category\n                tagaction=tagClose.action\n                taglabel=tagClose.label\n                data-test='rad-modal-close-button'}}\n                {{rad-svg svgId=closeIcon}}\n              {{/rad-button}}\n            &lt;/div>\n          {{/if}}\n        {{/if}}\n\n        {{! ----------------------------------------------------------------- }}\n        {{! Yield a unique identifier from inside this template so that we can\n        {{! reliably set this div's aria-labelledby and the id of a descriptive\n        {{! element inside the modal to the same identifier. Also yield open\n        {{! because who knows, we'll probably need it for something crazy\n        {{! ----------------------------------------------------------------- }}\n        {{yield\n          (hash\n            header=(component 'rad-modal/header'\n              closeModal=closeModal\n              elementId=(concat 'aria-labelledby-' elementId)\n              closeButton=closeButton\n              tagClose=tagClose\n            )\n            footer=(component 'rad-modal/footer')\n          )\n          open\n        }}\n      &lt;/div>\n    {{/if}}\n  `</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>"
}