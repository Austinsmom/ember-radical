{
  "attributes": {
    "id": "radical-v2",
    "linkLabel": null,
    "title": "Radical v2 Roadmap"
  },
  "body": "{{#fountainhead-header tagName=\"h2\" elementId=\"v2-goals\"}}v2 Goals{{/fountainhead-header}}\n<p>Radical is starting the journey to v2. Over the past few months we've learned some\nimportant lessons integrating Radical into a large scale, complex application and\nwe're bringing those learnings back to make Radical even more radical. Radical v2 aims\nto accomplish two goals:</p>\n<ul>\n<li>Easier integration through clearer addon CSS coverage</li>\n<li>More reliable and simpler to work with components through consistent APIs</li>\n</ul>\n{{#fountainhead-header tagName=\"h2\" elementId=\"v1-learnings\"}}v1 Learnings{{/fountainhead-header}}\n<p>There were two important take-aways we learned integrating Radical into our very\nlarge, very complex application:</p>\n<ul>\n<li>The addon CSS coverage wasn't clear and required a number of shims to work with\nBootstrap.</li>\n<li>The component APIs are mostly consistent, but there are a number of unnecessary\nvariances from component to component that require documentation lookup.</li>\n</ul>\n<p>The primary goal of v2 is to address these opportunities so that setting up,\ncustomizing styles, and writing components with Radical is as easy and consistent as\npossible while still allowing fine grained control of every detail when needed.</p>\n{{#fountainhead-header tagName=\"h2\" elementId=\"addon-css-architecture-improvements\"}}Addon CSS Architecture Improvements{{/fountainhead-header}}\n<p>Radical is not a CSS Framework, but Radical v1 attempted to create a small scale CSS\nframework while also splitting the component structures and theme styles so that apps <em>(\nincluding our own production apps)</em> could consume Radical alongside Bootstrap's\nstylesheets. The result was inconsistent and sometimes confusing CSS imports. Some\ncomponents worked with just the corresponding component-structures imported, but\nmany required some of the styles in the theme sections, but not <em>all</em> of the\ntheme styles. As a result we had to write some stop-gap styles or import theme\nstyles from Radical.</p>\n<p>In v2 we are focusing on doing one thing extremely well: building a set of\ncomposable, accessible components that <strong>inherit</strong> styling from a first class CSS\nframework. The intent is that integrating Radical is simple, a single set of\napplication style variables drive the appearance of your CSS framework, application\ncustom styles and Radical component styles. Bootstrap v4 will be the first class\ncitizen of Radical v2, but is not required.</p>\n{{#fountainhead-header tagName=\"h2\" elementId=\"component-api-improvements\"}}Component API Improvements{{/fountainhead-header}}\n<p>The current Radical component set is fully accessible, composable and follow DDAU\nbest practices. But the existing component APIs have small variations from one\ncomponent to another that require frequent documentation reference. Our goal in v2\nis standardize the component APIs whenever possible. The end result being more\nconfidence when working working with Radical components and less time spent\nreferencing documentation.</p>\n<p>In addition, there are varying levels of control available for interactive elements\nin the current library. Part of the enhancements in v2 is ensuring that any component\nservicing user interaction can function as an uncontrolled component, be observed\nthrough consistent event hooks, or be entirely controlled through passed properties\nand closure actions. This is an important step in making components lightweight to\nimplement for standard cases, while offering the ability to assume fine grained\ncontrol for complex scenarios.</p>\n",
  "frontmatter": "id: radical-v2\nlinkLabel:\ntitle: Radical v2 Roadmap",
  "id": "radical-v2"
}